{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL Triangulation conformer 2 CDT The class Triangulation conformer 2 CDT is an auxiliary class of Delaunay mesher 2 CDT It permits to refine a constrained Delaunay triangulation into a conforming Delaunay or conforming Gabriel triangulation For standard needs consider using the global functions make conforming Gabriel 2 and make conforming Delaunay 2 Parameters The template parameter CDT should be a model of the concept ConstrainedDelaunayTriangulation 2 The geometric traits class of the instance of CDT has to be a model of the concept ConformingDelaunayTriangulationTraits 2 Using this class The constructor of the class Triangulation conformer 2 CDT takes a reference to a CDT as an argument A call to the method make conforming Delaunay or make conforming Gabriel will refine this contrained Delaunay triangulation into a conforming Delaunay or conforming Gabriel triangulation Note that if during the life time of the Triangulation conformer 2 CDT object the triangulation is externally modified any further call to its member methods may lead to undefined behavior Consider reconstructing a new Triangulation conformer 2 CDT object if the triangulation has been modified The conforming methods insert points into constrained edges thereby splitting them into several sub constraints You have access to the initial inserted constraints if you instantiate the template parameter by a CGAL Constrained triangulation plus 2 CDT include CGAL Triangulation conformer 2 h Creation Triangulation conformer 2 CDT m CDT t Create a new conforming maker working on t Operations Conforming methods void m make conforming Delaunay Refines the triangulation into a conforming Delaunay triangulation After a call to this method all triangles fulfill the Delaunay property that is the empty circle property void m make conforming Gabriel Refines the triangulation into a conforming Gabriel triangulation After a call to this method all constrained edges e have the Gabriel property the circle with diameter e does not contain any vertex of the triangulation Checking The following methods verify that the constrained triangulation is conforming Delaunay or conforming Gabriel These methods scan the whole triangulation and their complexity is proportional to the number of edges bool m is conforming Delaunay Returns true iff all triangles fulfill the Delaunay property bool m is conforming Gabriel Returns true iff all constrained edges have the Gabriel property their circumsphere is empty advanced Step by step operations The Triangulation conformer 2 CDT class allows for debugging or demos to play the conforming algorithm step by step using the following methods They exist in two versions depending on whether you want the triangulation to be conforming Delaunay or conforming Gabriel respectively Any call to a step by step conforming XX function requires a previous call to the corresponding function init XX and Gabriel and Delaunay methods can not be mixed between two calls of init XX void m init Delaunay The method must be called after all points and constrained segments are inserted and before any call to the following methods If some points or segments are then inserted in the triangulation this method must be called again bool m step by step conforming Delaunay Applies one step of the algorithm by inserting one point if the algorithm is not done Returns false iff no point has been inserted because the algorithm is done void m init Gabriel Analog to init Delaunay for Gabriel conforming bool m step by step conforming Gabriel Analog to step by step conforming Delaunay for Gabriel conforming bool m is conforming done Tests if the step by step conforming algorithm is done If it returns true the following calls to step by step conforming XX will not insert any points until some new constrained segments or points are inserted in the triangulation and init XX is called again advanced Next Delaunay mesher 2 CDT Criteria Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Mesh_2_ref/Class_Triangulation_conformer_2.html", "title": "triangulation_conformer_2&lt;cdt&gt;", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Mesh_2_ref/Triangulation_conformer_2.tex' -->\n<html> <head>  \n<title>Triangulation_conformer_2&lt;CDT&gt;</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_1089\"></A>\n\n<A NAME=\"Cross_link_anchor_1090\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_995\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Class.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::Triangulation_conformer_2<CDT>\"></A>\n<h2><I>CGAL::Triangulation_conformer_2&lt;CDT&gt;</I></h2>\n<P>\n\nThe class <I><A HREF=\"Class_Triangulation_conformer_2.html#Cross_link_anchor_1090\">Triangulation_conformer_2</A>&lt;CDT&gt;</I> is an auxiliary class of\n<I><A HREF=\"Class_Delaunay_mesher_2.html#Cross_link_anchor_1092\">Delaunay_mesher_2</A>&lt;CDT&gt;</I>. It permits to refine a constrained\nDelaunay triangulation into a conforming Delaunay or conforming\nGabriel triangulation. For standard needs, consider using the global\nfunctions <I><A HREF=\"Function_make_conforming_Gabriel_2.html#Cross_link_anchor_1107\">make_conforming_Gabriel_2</A></I> and\n<I><A HREF=\"Function_make_conforming_Delaunay_2.html#Cross_link_anchor_1105\">make_conforming_Delaunay_2</A></I>.\n<P>\n\n<H3>Parameters</H3>\n<P>\n\nThe template parameter <I>CDT</I> should be a model of the concept\n<I>ConstrainedDelaunayTriangulation_2</I>.\n<P>\n\nThe geometric traits class of the instance of <I>CDT</I> has to be\na model of the concept <I><A HREF=\"Concept_ConformingDelaunayTriangulationTraits_2.html#Cross_link_anchor_1085\">ConformingDelaunayTriangulationTraits_2</A></I>.\n<P>\n\n<H3>Using this class</H3>\n<P>\n\nThe constructor of the class <I><A HREF=\"Class_Triangulation_conformer_2.html#Cross_link_anchor_1090\">Triangulation_conformer_2</A>&lt;CDT&gt;</I> takes a reference to a <I>CDT</I>\nas an argument. A call to the method <I>make_conforming_Delaunay()</I> or\n<I>make_conforming_Gabriel()</I> will refine this contrained Delaunay\ntriangulation into a conforming Delaunay or conforming Gabriel\ntriangulation. Note that if, during the life time of the <I><A HREF=\"Class_Triangulation_conformer_2.html#Cross_link_anchor_1090\">Triangulation_conformer_2</A>&lt;CDT&gt;</I> object, the triangulation is externally modified, any further call to its\nmember methods may lead to undefined behavior. Consider reconstructing a\nnew <I><A HREF=\"Class_Triangulation_conformer_2.html#Cross_link_anchor_1090\">Triangulation_conformer_2</A>&lt;CDT&gt;</I> object if the triangulation has been modified.\n<P>\n\nThe conforming methods insert points into constrained edges, thereby splitting\nthem into several sub-constraints. You have access to the initial inserted\nconstraints if you instantiate the template parameter by a\n<I><A HREF=\"../Triangulation_2_ref/Class_Constrained_triangulation_plus_2.html#Cross_link_anchor_916\">CGAL::Constrained_triangulation_plus_2</A>&lt;CDT&gt;</I>.\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/Triangulation_conformer_2.h\">CGAL/Triangulation_conformer_2.h</A>&gt;</I>\n<P>\n\n<H3>Creation</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Triangulation_conformer_2.html#Cross_link_anchor_1090\">Triangulation_conformer_2</A>&lt;CDT&gt; m ( CDT&amp; t);\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    Create a new conforming maker, working on <I>t</I>.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Operations</H3>\n<P>\n\n<H3>Conforming methods</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_make_conforming_Delaunay69;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    m.make_conforming_Delaunay ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Refines the triangulation into a conforming Delaunay triangulation.\n  After a call to this method, all triangles fulfill the Delaunay property,\n  that is the empty circle\n  property.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_make_conforming_Gabriel69;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    m.make_conforming_Gabriel ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Refines the triangulation into a conforming Gabriel triangulation.\n  After a call to this method, all constrained edges <MATH><I>e</I></MATH> have the\n  <I>Gabriel property</I>: the circle with diameter <MATH><I>e</I></MATH> \n  does not contain any vertex of the triangulation.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Checking</H3>\nThe following methods verify that the constrained triangulation is\nconforming Delaunay or conforming Gabriel. These methods scan the\nwhole triangulation and their complexity is proportional to the number\nof edges.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_conforming_Delaunay69;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    m.is_conforming_Delaunay ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns <I>true</I> iff all triangles fulfill the Delaunay property.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_conforming_Gabriel69;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    m.is_conforming_Gabriel ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns <I>true</I> iff all constrained edges have the Gabriel property:\n  their circumsphere is empty.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<BR>\n\n<div class=\"AdvancedBlock\">\n  <table><tr><td valign=\"top\">\n  <img border=\"0\" src=\"cc_advanced_begin1.gif\" alt=\"begin of advanced section\">\n  </td><td valign=\"top\">\n  <em class=\"AdvancedBlockLabel\">&nbsp;advanced&nbsp;</em>\n  </td><td valign=\"top\">\n  <img border=\"0\" src=\"cc_advanced_begin2.gif\" alt=\"begin of advanced section\">\n  </td></tr></table>\n<P>\n\n<H3>Step by step operations</H3>\n<P>\n\nThe <I><A HREF=\"Class_Triangulation_conformer_2.html#Cross_link_anchor_1090\">Triangulation_conformer_2</A>&lt;CDT&gt;</I> class allows, for debugging or demos, to play the\nconforming algorithm step by step, using the following methods. They exist\nin two versions, depending on whether you want the triangulation to be\nconforming Delaunay or conforming Gabriel, respectively. Any call to a\n<I>step_by_step_conforming_XX</I> function requires a previous call to the\ncorresponding function <I>init_XX</I> and Gabriel and Delaunay methods can\nnot be mixed between two calls of <I>init_XX</I>.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_init_Delaunay69;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    m.init_Delaunay ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    The method must be called after all points and constrained segments\n  are inserted and before any call to the following methods. If some\n  points or segments are then inserted in the triangulation, this\n  method must be called again.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_step_by_step_conforming_Delaunay_69;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    m.step_by_step_conforming_Delaunay ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Applies one step of the algorithm, by inserting one point, if the\n  algorithm is not done. Returns <I>false</I> iff no point has been inserted\n  because the algorithm is done.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_init_Gabriel69;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    m.init_Gabriel ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Analog to\n    <I>init_Delaunay</I> for Gabriel conforming.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_step_by_step_conforming_Gabriel_69;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    m.step_by_step_conforming_Gabriel ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Analog to\n  <I>step_by_step_conforming_Delaunay()</I> for Gabriel conforming.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_conforming_done69;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    m.is_conforming_done ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Tests if the step by step conforming algorithm is done. If it\n  returns <I>true</I>, the following calls to\n  <I>step_by_step_conforming_XX</I> will not insert any points, until some\n  new constrained segments or points are inserted in the triangulation and\n  <I>init_XX</I> is called again.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<table><tr><td valign=\"bottom\">\n  <img border=\"0\" src=\"cc_advanced_end1.gif\" alt=\"end of advanced section\">\n  </td><td valign=\"bottom\">\n  <em class=\"AdvancedBlockLabel\">&nbsp;advanced&nbsp;</em>\n  </td><td valign=\"bottom\">\n  <img border=\"0\" src=\"cc_advanced_end2.gif\" alt=\"end of advanced section\">\n  </td></tr></table></div>\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Class_Delaunay_mesher_2.html\"><I>Delaunay_mesher_2&lt;CDT, Criteria&gt;</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_48!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 38564.0}